{
  "hash": "1e9929d01d80a8a807cac77b2ea6cb66",
  "result": {
    "markdown": "---\ntitle: Analyzing missing values in Python using `missingno`\nauthor: Kumar H\ndate: 21 Nov 2023\nformat:\n  html:\n    fig-width: 2\n    fig-height: 2\n    execute:\n      code_fold: true\n      warning: false\n---\n\n**Missingno** is our Sherlock Holmes in the world of Python data analysis. It’s a library specifically designed to tackle one of the most common yet frustrating parts of data analysis – missing values. You know, those pesky NaNs that lurk in your datasets, often skewing your analyses or, worse, leading to erroneous conclusions.\n\n- **Simplicity**: It's user-friendly and integrates seamlessly with Pandas, making it a breeze to use right out of the box.\n- **Visual**: Offers a range of visualizations - matrix plots, bar charts, heatmaps, and dendrograms - turning the bland task of missing data analysis into a visually engaging experience.\n- **Pattern Recognition**: Helps you quickly spot patterns of missingness, which can be critical for understanding your data's structure and quality.\n\n\n### Getting started\n\nFirst, ensure you have missingno installed. If not, a quick pip install does the trick:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n!pip install missingno\n```\n:::\n\n\n### Load the libraries and the data\n\nWe will use a dataset of residential building characteristics collected and made public by the Washington DC government, called the [Computer Assisted Mass Appraisal (CAMA) database](https://opendata.dc.gov/datasets/DCGIS::computer-assisted-mass-appraisal-residential/about). We also import the [missingno package](https://github.com/ResidentMario/missingno) that we installed above.\n\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\n\n#####################\n\n# Load your dataset\ndf = pd.read_csv('dc_tax_data.csv')\ndf=df[['SSL', 'BATHRM','HEAT_D', 'AC', 'NUM_UNITS',\n       'ROOMS', 'BEDRM', 'AYB', 'YR_RMDL', 'STORIES', 'SALEDATE',\n       'PRICE', 'QUALIFIED', 'SALE_NUM', 'GBA', 'BLDG_NUM', 'STYLE_D', 'STRUCT_D', 'GRADE_D',\n         'CNDTN_D', 'EXTWALL_D', 'ROOF_D', 'INTWALL_D', 'KITCHENS',\n       'FIREPLACES']]\n```\n:::\n\n\n## Visualizing missing values\n\n\n`missingno` offers visualizations for two main purposes - reporting missing rows and columns, and checking the relation of missing values among columns. Let's begin by checking out the first type.\n\n### 1. Matrix\n\n\nThe following code helps us visualize the missing values in a matrix. Note that you can set the figure size and fontsize parameters as you wish:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmsno.matrix(df, figsize=(10,5), fontsize=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<AxesSubplot:>\n```\n\n<strong>Matrix of missing values</strong>\n:::\n\n::: {.cell-output .cell-output-display}\n![](msno_tut_files/figure-html/cell-5-output-2.png){width=847 height=466}\n:::\n:::\n\n\nThis plot shows us the pattern of missingness across columns. White lines indicate missing values. A quick glance can tell you if there’s a pattern or if the missingness is random. As we see above, the `YR_RMDL` (year in which building was remodeled) column has the most missing values, followed by the `PRICE` column. \n\n**Note** - As will become clearer in the subsequent examples, looking at visuals will not be meaningful beyond 50 columns.\n\n\n### 2. Barplot.\n\nThe Bar chart is a quick-check tool to see how many non-missing values we have per column.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nmsno.bar(df, figsize=(9, 4), fontsize=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<AxesSubplot:>\n```\n\n<strong>Barplot of missing non-missing values</strong>\n:::\n\n::: {.cell-output .cell-output-display}\n![](msno_tut_files/figure-html/cell-6-output-2.png){width=780 height=439}\n:::\n:::\n\n\n### 3. Heatmap\n\nThe `missingno` heatmap is a tool for exploring the relationship between missing values in different variables within a dataset. This heatmap focuses on nullity correlation, which essentially tells us how the presence or absence of one variable impacts another. The algorithm behind this heatmap filters out variables that don't significantly contribute to the analysis. This means variables that are consistently non-null or always null are excluded because they don’t provide useful correlation information.\n\nEntries marked <1 or >-1 hint at near-perfect negative or positive relationships with a few exceptions. These exceptions are important as they might indicate irregularities or errors in the data. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf2=df.iloc[:, 2:28]\nmsno.heatmap(df2, figsize=(9, 5), fontsize=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<AxesSubplot:>\n```\n\n<strong>Heatmap - Missing value correlations</strong>\n:::\n\n::: {.cell-output .cell-output-display}\n![](msno_tut_files/figure-html/cell-7-output-2.png){width=746 height=462}\n:::\n:::\n\n\n### 4. Dendrogram\n\nThe `dendrogram` in `missingno` offers a more comprehensive view of variable completion correlations, going beyond the pairwise analysis seen in the correlation heatmap. It employs a hierarchical clustering algorithm from the SciPy library to assess variables against each other based on their nullity correlation. This is done by evaluating binary distance, where the algorithm iteratively groups variables in a way that minimizes the distance within these clusters. A key aspect of this process is that variables with similar patterns of missingness are clustered together. When you look at a dendrogram, you're essentially reading a story of variable correlation from the top down. Points where cluster leaves join at zero indicate a perfect prediction of one variable's presence by another’s. This could mean scenarios where one variable is always empty when another is filled, or they might consistently mirror each other’s state (both being empty or filled).\n\nFor instance, in a specific dataset, the dendrogram might cluster together variables that are mandatory and therefore always present. Leaves that are close but not exactly at zero suggest a strong, albeit not perfect, correlation. Such nuances are crucial for data analysts, as they highlight potential mismatches or anomalies in the dataset. If, according to your understanding of the data, certain columns should match in their presence or absence, the dendrogram can quantify the extent of mismatches. This insight could inform decisions on how many values need to be adjusted to align with expected patterns.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Dendrogram\nmsno.dendrogram(df2, figsize=(9, 5))\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n\n<strong>Dendrogram of missing values</strong>\n:::\n\n::: {.cell-output .cell-output-display}\n![](msno_tut_files/figure-html/cell-8-output-2.png){width=820 height=496}\n:::\n:::\n\n\nThe diagram suggests that \"PLACES\", \"BEDRM\", \"ROOMS\", and \"STORIES\" have very similar patterns of missingness, hence they are clustered closely together. \"AYB\" and \"YR_RMDL\" merge at a higher point than \"PLACES\", \"BEDRM\", \"ROOMS\", and \"STORIES\", suggesting that \"AYB\" and \"YR_RMDL\" are less similarly missing compared to the other cluster.\n\nWhere clusters join together at the very bottom, it could suggest that the presence or absence of one variable is a good predictor for the presence or absence of the other within the same cluster.\n\n### Limitations:\n\nThe simplicity of this package is a double-edged sword. There is limited flexibility and customization. Moreover, the official documentation notes that datasets with more than 50 variables are difficult to visualize. Moreover, if you have a large number of variables, visual checks of missingness patterns are probably insufficient, and you should use statistical techniques to check patterns.\n\n\n## Conclusion\n\nIn machine learning applications, missing values might seem like an irritation to be disposed of quickly. Our ultimate goal is to reach a missingno matrix like this:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf2 = df2.dropna()\nmsno.matrix(df2, figsize=(8, 4), fontsize=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<AxesSubplot:>\n```\n\n<strong>Matrix - no null values</strong>\n:::\n\n::: {.cell-output .cell-output-display}\n![](msno_tut_files/figure-html/cell-9-output-2.png){width=688 height=394}\n:::\n:::\n\n\n**But exercise caution and patience!**\n\nDropping or imputing missing values willy-nilly without examining the co-occurrence pattern among variables may introduce subtle, damaging biases into the dataset. However, the lean and efficient `missingno` library will hopefully let you diagnose the missing patterns in seconds. \n\n\nHappy coding!\n\n---\n\n### References:\n\nhttps://github.com/ResidentMario/missingno\n\nhttps://opendata.dc.gov/datasets/DCGIS::computer-assisted-mass-appraisal-residential/about\n\n",
    "supporting": [
      "msno_tut_files"
    ],
    "filters": [],
    "includes": {}
  }
}